import random
import sqlalchemy
import os
import dotenv
from faker import Faker
import numpy as np

def database_connection_url():
    dotenv.load_dotenv()
    DB_USER: str = os.environ.get("POSTGRES_USER")
    DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
    DB_SERVER: str = os.environ.get("POSTGRES_SERVER")
    DB_PORT: str = os.environ.get("POSTGRES_PORT")
    DB_NAME: str = os.environ.get("POSTGRES_DB")
    return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

#DATABASE_URL = "postgresql://carsonolander:your_password@localhost:5432/your_database"


# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True)

pritories = [1,2,3,4,5]
frequency = ['daily', 'weekly', 'biweekly', 'monthly', 'bimonthly', 'yearly']
house_location = ['living room', 'bedroom', 'kitchen', 'dining room']
bill_type = ['electricity', 'water', 'internet', 'rent', 'gas', 'trash', 'groceries']
chore_type = ['wash dishes', 'clean bathroom', 'mop floor', 'vacuum', 'clean living room', 'clean bedroom']

num_roommates = 20
num_chores_per_roommate = 35000
num_bills = 300000

with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
    DROP TABLE IF EXISTS chores;
    DROP TABLE IF EXISTS roommates;
    DROP TABLE IF EXISTS chore_assignment;
    DROP TABLE IF EXISTS bill;
    DROP TABLE IF EXISTS bill_list;

    create table
        public.roommate (
            id bigint generated by default as identity not null,
            created_at timestamptz now()
            first_name text null,
            last_name text null,
            email text null,
            constraint roommate_pkey primary key (id)
        ) tablespace pg_default;
                                 

    create table
        public.chore (
            id bigint generated by default as identity not null,
            created_at timestamptz now()
            name text null,
            location_in_house text null,
            frequency public.frequency_enum null,
            duration_mins bigint null default '0'::bigint,
            priority integer null,
            due_date date null,
            constraint chore_pkey primary key (id),
            constraint chore_priority_check check (
                (
                    (priority >= 1)
                    and (priority <= 5)
                )
            )
        ) tablespace pg_default; 

        
    create table
        public.chore_assignment (
            id bigint generated by default as identity not null,
            created_at timestamptz now()
            chore_id bigint null,
            roommate_id bigint null,
            status public.status_enum null,
            constraint chore_assignment_pkey primary key (id),
            constraint chore_assignment_chore_id_fkey foreign key (chore_id) references chore (id),
            constraint chore_assignment_roommate_id_fkey foreign key (roommate_id) references roommate (id)
        ) tablespace pg_default;                                                                                 
        
                                 
    create table
        public.bill (
            id bigint generated by default as identity not null,
            created_at timestamptz now()
            cost double precision null,
            due_date date null,
            bill_type public.bill_type_enum null,
            message text null,
            constraint bill_pkey primary key (id)
        ) tablespace pg_default;


    create table
        public.bill_list (
            id bigint generated by default as identity not null,
            created_at timestamptz now()
            bill_id bigint null,
            roommate_id bigint null,
            status public.status_enum null,
            amount real not null default '0'::real,
            constraint bill_list_pkey primary key (id),
            constraint bill_list_bill_id_fkey foreign key (bill_id) references bill (id)
        ) tablespace pg_default;                                                      
    """))
    

    fake = Faker()
    chore_sample_distribution = np.random.choice(
        frequency, 
        num_chores_per_roommate * num_roommates, 
        p=[0.2, 0.2, 0.2, 0.2, 0.1, 0.1])
    pritories_sample_distribution = np.random.choice(
        pritories, 
        num_chores_per_roommate * num_roommates, 
        p=[0.2, 0.2, 0.2, 0.2, 0.2])
    frequency_sample_distribution = np.random.choice(
        frequency, 
        num_chores_per_roommate * num_roommates, 
        p=[0.3, 0.3, 0.2, 0.1, 0.05, 0.05])
    house_location_sample_distribution = np.random.choice(
        house_location, 
        num_chores_per_roommate * num_roommates, 
        p=[0.25, 0.25, 0.25, 0.25])
    bill_type_sample_distribution = np.random.choice(
        bill_type, 
        num_chores_per_roommate * num_roommates, 
        p=[0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1])

    
    
    with engine.begin() as conn:
        print("creating fake roommates and chores...")
        roommate_ids_list = []
        chore_ids_list = []
        num_total_chores = 0
        for i in range(num_roommates):
            if (i % 10 == 0):
                print('roommate #', i)

            first_name = fake.name()
            last_name = fake.name()
            email = fake.email()

            roommate_id = conn.execute(sqlalchemy.text('''
                INSERT INTO roommate (first_name, last_name, email)
                VALUES (:first_name, :last_name, :email) RETURNING id;
                '''),
                {
                    "first_name": first_name,
                    "last_name": last_name,
                    "email": email
                 })
            roommate_ids_list.append(roommate_id)

            for i in range(num_chores_per_roommate):
                num_total_chores += 1
                chore_id = conn.execute(sqlalchemy.text('''
                    INSERT INTO chore (name, location_in_house, frequency, duration_mins, priority, due_date)
                    VALUES (:name, :location_in_house, :frequency, :duration_mins, :priority, :due_date) RETURNING id
                '''),
                {
                    "name": chore_sample_distribution[i].item(),
                    "location_in_house": house_location_sample_distribution[i].item(),
                    "frequency": frequency_sample_distribution[i].item(),
                    "duration_mins": random.randint(1, 120),
                    "priority": pritories_sample_distribution[i].item(),
                    "due_date": fake.date()
                })
                chore_ids_list.append(chore_id)
            
            for chore in chore_ids_list:
                conn.execute(sqlalchemy.text('''
                    INSERT INTO chore_assignment (chore_id, roommate_id, status)
                    VALUES (:chore_id, :roommate_id, :status)
                '''),
                {
                    "chore_id": chore,
                    "roommate_id": roommate_id,
                    "status": fake.random_element(elements=('pending', 'in_progress', 'completed'))
                })

                #TODO: fake bill data
        

        